node IP40(u, s:real;) returns(y: real;)
var
x1: real; -- tilt
x2: real; -- tilt angular rate
x3: real; -- forward/backward velocity
x4: real; -- yaw
x5: real; -- yaw angular rate
let
    -- state space evolution
    x1 = (s -> pre x1) + 0.01*(0.0 -> pre x2) - 0.00008365*(u);
    x2 = 0.06152*(s -> pre x1) + (0.0 -> pre x2) - 0.01673*(u);
    x3 = -0.0002663*(s -> pre x1) - 0.000001331*(0.0 -> pre x2) + (0.0 -> pre x3) + 0.02657*(u);
    x4 = (0.0 -> pre x4) + 0.01*(0.0 -> pre x5);
    x5 = (0.0 -> pre x5);

    y = x1;
tel

node IP30(u, s:real;) returns(y: real;)
var
x1: real; -- tilt
x2: real; -- tilt angular rate
x3: real; -- forward/backward velocity
x4: real; -- yaw
x5: real; -- yaw angular rate
let
    -- state space evolution
    x1 = (s -> pre x1) + 0.01*(0.0 -> pre x2) - 0.00009482*(u);
    x2 = 0.07012*(s -> pre x1) + (0.0 -> pre x2) - 0.01896*(u);
    x3 = -0.0007957*(s -> pre x1) - 0.000003978*(0.0 -> pre x2) + (0.0 -> pre x3) + 0.02664*(u);
    x4 = (0.0 -> pre x4) + 0.01*(0.0 -> pre x5);
    x5 = (0.0 -> pre x5);

    y = x1;
tel

node IP20(u, s:real;) returns(y: real;)
var
x1: real; -- tilt
x2: real; -- tilt angular rate
x3: real; -- forward/backward velocity
x4: real; -- yaw
x5: real; -- yaw angular rate
let
    -- state space evolution
    x1 = (s -> pre x1) + 0.01*(0.0 -> pre x2) - 0.0001032*(u);
    x2 = 0.07658*(s -> pre x1) + (0.0 -> pre x2) - 0.02062*(u);
    x3 = -0.001231*(s -> pre x1) - 0.000006157*(0.0 -> pre x2) + (0.0 -> pre x3) + 0.0267*(u);
    x4 = (0.0 -> pre x4) + 0.01*(0.0 -> pre x5);
    x5 = (0.0 -> pre x5);

    y = x1;
tel

node IP10(u, s:real;) returns(y: real;)
var
x1: real; -- tilt
x2: real; -- tilt angular rate
x3: real; -- forward/backward velocity
x4: real; -- yaw
x5: real; -- yaw angular rate
let
    -- state space evolution
    x1 = (s -> pre x1) + 0.01*(0.0 -> pre x2) - 0.0001082*(u);
    x2 = 0.08061*(s -> pre x1) + (0.0 -> pre x2) - 0.02164*(u);
    x3 = -0.001518*(s -> pre x1) - 0.000007589*(0.0 -> pre x2) + (0.0 -> pre x3) + 0.02674*(u);
    x4 = (0.0 -> pre x4) + 0.01*(0.0 -> pre x5);
    x5 = (0.0 -> pre x5);

    y = x1;
tel

node IP0(u, s:real;) returns(y: real;)
var
x1: real; -- tilt
x2: real; -- tilt angular rate
x3: real; -- forward/backward velocity
x4: real; -- yaw
x5: real; -- yaw angular rate
let
    -- state space evolution
    x1 = (s -> pre x1) + 0.01*(0.0 -> pre x2) - 0.0001095*(u);
    x2 = 0.08197*(s -> pre x1) + (0.0 -> pre x2) - 0.0219*(u);
    x3 = -0.001618*(s -> pre x1) - 0.000008089*(0.0 -> pre x2) + (0.0 -> pre x3) + 0.02675*(u);
    x4 = (0.0 -> pre x4) + 0.01*(0.0 -> pre x5);
    x5 = (0.0 -> pre x5);

    y = x1;
tel

node TWIP(s:real;) returns(y:real;)
var
e: real; -- error signal
u: real; -- control signal
cnt: int; -- iteration count
NT: bool; -- stability condition
let
    -- max initial tilt assertion
    assert(s < 3.14/30.0);
    assert(s > -3.14/30.0);

    -- get digital time
    cnt = (0 -> pre cnt + 1);

    -- select the correct linear system
    --y = if(( (s -> pre y) < (-35.0*3.1415/180.0)) or ((s -> pre y) > (35.0*3.1415/180.0))) then IP40(0.0 -> pre u, s)
    --    else if(((s -> pre y) < (-25.0*3.1415/180.0)) or ((s -> pre y) > (25.0*3.1415/180.0))) then  IP30(0.0 -> pre u, s)
    --    else if(((s -> pre y) < (-15.0*3.1415/180.0)) or ((s -> pre y) > (15.0*3.1415/180.0))) then  IP20(0.0 -> pre u, s)
    --    else if(((s -> pre y) < (-5.0*3.1415/180.0)) or ((s -> pre y) > (5.0*3.1415/180.0))) then  IP10(0.0 -> pre u, s)
    --    else  IP0(0.0 -> pre u, s);

    u = PIDControl(-s -> pre e);
    y = IP0(u, s);

    -- error signal to control signal
    e = -y;
    

    -- stability condition
    -- NT = (cnt < 20) or (y < 0.1 and cnt >= 20 and cnt < 30) or (cnt >= 30);
    NT =  (y < 3.14/5.0 and cnt < 100) or (cnt >= 100);
--%PROPERTY NT;
tel

node PIDControl(X : real) returns (Y : real);
const Kp: real = 51.0;
const Ki: real = 140.0;
const Kd: real = 3.2;
const Dt: real = 0.01;
const max_val: real = 1000.0;
let
    Y = MinMax(Kp * X + Ki * Dt * Accumulate(X) + Kd/Dt * BackDifference(X), max_val);
tel

node BackDifference(X : real) returns (Y : real);
let
    Y = X - (0.0 -> pre X);
tel

node Accumulate(X : real) returns (Y : real);
let
    Y = X -> X + (pre Y);
tel

node Min(X, Y : real) returns (Z : real);
let
    Z = if (X < Y) then X else Y;
tel

node Max(X, Y : real) returns (Z : real);
let
    Z = if (X > Y) then X else Y;
tel

node MinMax(X, Y : real) returns (Z : real);
let
    Z = Max(Min(X, Y), -Y);
tel
